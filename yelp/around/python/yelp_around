#!/usr/bin/env python

# ----------------------------------------------------------------
# Copyright 2015 Aerospike, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------

import argparse
import json
import os.path
import sys
import time

import aerospike

VALBIN = "val"
LOCBIN = "loc"

count = 0

def print_record(tup):
    """Prints a record to standard output"""
    global count
    (key, metadata, record) = tup
    print record[VALBIN]
    count += 1
    
def print_value(record):
    """Prints a record to standard output"""
    global count
    print record
    count += 1
    
def query_circle(args, client):
    """Query for records inside a circle."""
    region = aerospike.GeoJSON({
        'type': 'AeroCircle',
        'coordinates': [[args.longitude, args.latitude], args.radius]
    })
    query = client.query(args.nspace, args.set)
    query.where(aerospike.predicates.geo_within(LOCBIN, region.dumps()))
    if not args.category:
        # Basic search, no category filter
        query.select(VALBIN)
        query.foreach(print_record)
    else:
        # Search with UDF category filter
        query.apply('filter_by_category', 'apply_filter', [args.category,])
        query.foreach(print_value)

def register_udf(args, client):
    """Register the user defined function with the server"""
    client.udf_put("filter_by_category.lua", aerospike.UDF_TYPE_LUA)
    
def setup_aerospike(args):
    """Establish connection to server"""
    lua_sys_path = os.path.dirname(aerospike.__file__) + "/../../../aerospike/lua"
    config = {
        'hosts': [ (args.host, args.port), ],
        'lua': { 'user_path': ".",
                 'system_path': lua_sys_path }
    }
    client = aerospike.client(config)
    client.connect(args.user, args.passwd)
    return client

def cleanup_aerospike(args, client):
    """Gracefully shutdown the connection to the server"""
    client.close()

class HelpfulParser(argparse.ArgumentParser):
    """Prints usage when an error is encountered"""
    def error(self, message):
        sys.stderr.write('error: %s\n' % (message,))
        self.print_help()
        sys.exit(2)
    
def setup_parser():
    """Parse command line options"""
    parser = HelpfulParser(
        add_help=False,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('-u', '--usage', action="help",
                        help="Show this help message and exit")
    parser.add_argument('-h', '--host', metavar='HOST', type=str,
                        default='localhost', help='Server hostname')
    parser.add_argument('-p', '--port', metavar='PORT', type=int,
                        default='3000', help='Server port')
    parser.add_argument('-U', '--user', metavar='USER', type=str,
                        default=None, help='Username')
    parser.add_argument('-P', '--passwd', metavar='PW', type=str,
                        default=None, help='Password')
    parser.add_argument('-n', '--nspace', metavar='NS', type=str,
                        default='test', help='Namespace')
    parser.add_argument('-s', '--set', metavar='SET', type=str,
                        default='yelp', help='Set name')
    parser.add_argument('-r', '--radius', metavar='R', type=float,
                        default='2000.0', help='Radius in meters')
    parser.add_argument('-c', '--category', metavar='C', type=str,
                        default=None, help='Filter with category')

    parser.add_argument('latitude', type=float, help='Search Latitude')
    parser.add_argument('longitude', type=float, help='Search Longitude')
    
    return parser

if __name__ == '__main__':

    parser = setup_parser()
    args = parser.parse_args()

    client = setup_aerospike(args)

    if args.category:
        register_udf(args, client)

    t0 = time.time()
    query_circle(args, client)
    t1 = time.time()

    cleanup_aerospike(args, client)

    print "found %d records in %f mSec" % (count, (t1 - t0) * 1000.0)
